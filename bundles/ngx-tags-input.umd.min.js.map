{"version":3,"sources":["ng://ngx-tags-input/lib/ngx-tags-input.component.ts","ng://ngx-tags-input/lib/ngx-tags-input.module.ts"],"names":["noop","CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NgxTagsInputComponent","multi","prototype","getPlaceholder","this","tags","length","placeholder","tagsChanged","type","tag","onChangeCallback","onTagsChanged","emit","change","maximumOfTagsReached","onMaxTagsReached","removeLastTag","tagInput","removeLastOnBackspace","value","removeTag","addTag","trim","_a","displayField","addPredefinedTag","keyDownEvent","event","which","slice","push","tagToRemove","isDeleteable","filter","maxTags","deleteable","canDeleteTags","typeaheadOnSelect","e","item","selected","typeaheadOnNoMatch","onNoOptionsMatch","writeValue","registerOnChange","fn","registerOnTouched","onTouchedCallback","Component","args","selector","template","providers","Input","Output","canAddTags","options","minLengthBeforeOptions","scrollableOptions","scrollableOptionsInView","EventEmitter","NgxTagsInputModule","NgModule","declarations","imports","FormsModule","CommonModule","TypeaheadModule","forRoot","exports"],"mappings":"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","sourcesContent":["import { Component, forwardRef, Input, Output, EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead/public_api';\n\nconst noop = () => {};\n\nconst TAGS_INPUT_TEMPLATE = `\n    <div class=\"tags-input\">\n        <span class=\"tags-input__tag label label-primary badge badge-primary\" *ngFor=\"let tag of tags\">\n            {{tag[displayField]}}\n            <span *ngIf=\"isDeleteable(tag)\" role=\"button\" class=\"tags-input__tag-remove-btn\" (click)=\"removeTag(tag)\" (touch)=\"removeTag(tag)\">\n                <span aria-hidden=\"true\">&times;</span>\n                <span class=\"sr-only\">Close</span>\n            </span>\n        </span>\n        <input\n            *ngIf=\"options === null; else withTypeahead\" \n            class=\"tags-input__input-field\" \n            type=\"text\" \n            [placeholder]=\"getPlaceholder()\"\n            name=\"tags\"\n            (keyup)=\"keyDownEvent($event, tagInput)\"\n            (keyup.enter)=\"addTag(tagInput)\" (keydown.backspace)=\"removeLastTag(tagInput)\"\n            [disabled]=\"!canAddTags || maximumOfTagsReached()\"\n            [hidden]=\"!canAddTags || maximumOfTagsReached()\"\n            #tagInput />\n        <ng-template #withTypeahead>\n          <input\n            *ngIf=\"options !== null\" \n            class=\"tags-input__input-field\" \n            type=\"text\" \n            [placeholder]=\"getPlaceholder()\"\n            name=\"tags\"\n            (keydown.backspace)=\"removeLastTag(tagInput)\"\n            [(ngModel)]=\"selected\" \n            [typeahead]=\"options\"\n            [typeaheadOptionField]=\"displayField\"\n            (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n            (typeaheadNoResults)=\"typeaheadOnNoMatch($event)\"\n            [typeaheadMinLength]=\"minLengthBeforeOptions\"\n            [typeaheadScrollable]=\"scrollableOptions\"\n            [typeaheadLatinize]=\"true\"\n            [typeaheadOptionsInScrollableView]=\"scrollableOptionsInView\"\n            [disabled]=\"!canAddTags || maximumOfTagsReached()\"\n            [hidden]=\"!canAddTags || maximumOfTagsReached()\"\n            #tagInput />\n        </ng-template>\n    </div>\n`;\n\nconst TAGS_INPUT_STYLE = `\n    :host {\n        overflow: auto;\n        white-space: nowrap;\n    }\n\n    .tags-input {\n        align-items: center;\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    .tags-input__tag {\n        display: inline-block;\n        margin-bottom: 2px;\n        margin-right: 5px;\n        padding-right: 0.3em;\n    }\n\n    .tags-input__tag-remove-btn {\n        cursor: pointer;\n        display: inline-block;\n        font-size: 12px;\n        margin: -3px 0 0 3px;\n        padding: 0;\n        vertical-align: top;\n    }\n\n    .tags-input__input-field {\n        border: none;\n        flex-grow: 1;\n        outline: none;\n    }\n`;\n\nconst CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgxTagsInputComponent),\n  multi: true\n};\n\nexport interface TagsChangedEvent {\n  change: string,\n  tag: any\n}\n\n@Component({\n  selector: 'ngx-tags-input',\n  template: TAGS_INPUT_TEMPLATE,\n  styles: [TAGS_INPUT_STYLE],\n  providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]\n})\nexport class NgxTagsInputComponent implements ControlValueAccessor {\n  selected:string = '';\n  public tags: Array<any> = [];\n  private onTouchedCallback: () => void = noop;\n  private onChangeCallback: (_: any) => void = noop;\n\n  @Input() maxTags: number;\n  @Input() removeLastOnBackspace: boolean = false;\n  @Input() canDeleteTags: boolean = true;\n  @Input() canAddTags: boolean = true;\n  @Input() placeholder: string = '';\n  @Input() options: any = null;\n  @Input() displayField: string = 'displayValue';\n  @Input() minLengthBeforeOptions: number = 1;\n  @Input() scrollableOptions: boolean = false;\n  @Input() scrollableOptionsInView: number = 5;\n  @Output() onTagsChanged: EventEmitter<TagsChangedEvent> = new EventEmitter();\n  @Output() onMaxTagsReached: EventEmitter<void> = new EventEmitter();\n  @Output() onNoOptionsMatch: EventEmitter<boolean> = new EventEmitter();\n\n  getPlaceholder(): string {\n    if(this.tags && this.tags.length > 0){\n        return '';\n    }\n    return this.placeholder;\n  }\n\n  private tagsChanged(type: string, tag: any): void {\n      this.onChangeCallback(this.tags);\n      this.onTagsChanged.emit({\n          change: type,\n          tag: tag\n      });\n      if(this.maximumOfTagsReached()){\n          this.onMaxTagsReached.emit();\n      }\n  }\n\n  removeLastTag(tagInput: HTMLInputElement): void {\n      if(!this.removeLastOnBackspace || !this.tags.length) {\n          return;\n      }\n\n      if (tagInput.value === ''){\n          this.removeTag(this.tags[this.tags.length-1]);\n      }\n  }\n\n  addTag(tagInput: HTMLInputElement): void {\n      if (tagInput.value.trim() !== ''){\n          let tag = {\n              [this.displayField]: tagInput.value\n          };\n          this.addPredefinedTag(tag);\n      }\n      tagInput.value = '';\n  }\n\n  keyDownEvent(event: any, tagInput: HTMLInputElement): void {\n      if (event.which === 188) {\n        tagInput.value = tagInput.value.slice(0, -1);\n        this.addTag(tagInput);\n      }\n  }\n\n  private addPredefinedTag(tag: Object): void {\n      if (!this.maximumOfTagsReached()){\n          this.tags.push(tag);\n          this.tagsChanged('add', tag);\n      }\n  }\n\n  removeTag(tagToRemove: any): void {\n      if(!this.isDeleteable(tagToRemove)){\n          return;\n      }\n      this.tags = this.tags.filter(tag => tagToRemove !== tag);\n      this.tagsChanged('remove', tagToRemove);\n  }\n\n  maximumOfTagsReached(): boolean {\n      return typeof this.maxTags !== 'undefined' && this.tags && this.tags.length>=this.maxTags;\n  }\n\n  isDeleteable(tag: any) {\n      if(typeof tag.deleteable !== \"undefined\" && !tag.deleteable){\n          return false;\n      }\n      return this.canDeleteTags;\n  }\n\n  typeaheadOnSelect(e:TypeaheadMatch):void {\n      if(typeof e.item === 'string'){\n          this.addPredefinedTag({\n              [this.displayField]: e.value\n          });\n      }else {\n          this.addPredefinedTag(e.item);\n      }\n      this.selected = '';\n  }\n\n  typeaheadOnNoMatch(e:any):void {\n      if(typeof this.onNoOptionsMatch !== 'undefined'){\n          this.onNoOptionsMatch.emit(e)\n      }\n  }\n\n  writeValue(value: any) {\n      if (value !== this.tags) {\n          this.tags = value;\n      }\n  }\n\n  registerOnChange(fn: any) {\n      this.onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any) {\n      this.onTouchedCallback = fn;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxTagsInputComponent } from './ngx-tags-input.component';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead'\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [NgxTagsInputComponent],\n  imports: [\n    FormsModule,\n    CommonModule,\n    TypeaheadModule.forRoot()\n  ],\n  exports: [NgxTagsInputComponent]\n})\nexport class NgxTagsInputModule { }\n"]}